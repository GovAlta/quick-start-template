---
title: "Event Modeling of Service Programs"
subtitle: "Decomposing Active Caseload"
author: "Research & Open Data"
format:
  html:
    page-layout: full
    toc: true
    toc-location: right
    code-fold: show
    theme: yeti
    highlight-style: breeze
    colde-line-numbers: true
    self-contained: true
    embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: console
---

# Mission

This document ...

# **Definition of Terms**

The history of relationships between people and programs is organized into *episodes of service.* Services can be of three broad types: financial assistance (FS), training (TR), and assessment (AS). ***In this analysis we focus on episodes of financial support***, which have certain unique features:

-   The smallest unit of time is one month

-   A FS event begins on the first day of the month and ends on the last day of the month (as opposed to TR an AS events which can take place any day of the month).

-   Client can receive only on type of support at a time (client_type_code)

We define two type of service episodes:

-   **SPELL** – A non-interrupted period of service use, separated from other SPELLs by at least two consecutive months of non-use.

-   **SPELL_BIT** – A non-interrupted period of service use, separated from other SPELL_BITs by at least two consecutive months of non-use *or* by a change in client type or household role. In other words, a change in client type or household role terminate the SPELL_BIT

SPELL_BITs make up SPELLs. In many cases, a SPELL consists of a single SPELL_BIT.

Episodes of Financial Support can be decomposed into constituent events:

-   **START** – The first day of the month in which the service in this episode is received.

-   **EXIT** – The last day of the month in which the service ins this episode is received.

-   **STAY** – Any month within the SPELL_BIT that is not a START or EXIT.

```{r}
#| code-summary: Reconciles working directory between execution modes
#| echo: false
#| results: hide
#| message: false 
#| warning: false
cat("Working directory: ", getwd())
library(knitr)
opts_knit$set(root.dir='../../') # keep this chunk isolated  
```

```{r}
#| label: set_options
#| code-summary: report-wide formatting options
#| echo: false
#| results: hide
#| message: false 
cat("Working directory: ", getwd()) # turn on to test the location
report_render_start_time <- Sys.time()
# set options shared by all chunks
opts_chunk$set(
  results      = 'show',
  message      = FALSE,
  warning      = FALSE,
  comment      = NA,
  tidy         = FALSE,
  # dpi        = 400, # dots per inch,
  out.width  = "960px", # pixels, this affects only the markdown, not the underlying png file.  The height will be scaled appropriately.
  fig.width    = 6, # inches
  fig.height   = 4, # inches
  fig.path     = 'figure-png-iso/' # where figures are stored
  
)
echo_chunks    <- FALSE #Toggle for debugging.
message_chunks <- FALSE #Toggle for debugging.
options(width=100) # number of characters to display in the output (dflt = 80)
ggplot2::theme_set(ggplot2::theme_bw()) # common theme for all graphs
read_chunk("./analysis/fs-dynamics/1-scribe.R") #This allows knitr to call
```

# Environment

> Reviews the components of the working environment of the report. Non-technical readers are welcomed to skip. Come back if you need to understand the origins of custom functions, scripts, or data objects.

```{r}
#| label: load-packages
#| code-summary: Packages used in the current report
#| echo: true
#| results: hide
#| message: false
#| code-fold: true
```

```{r}
#| label: load-sources
#| code-summary: Collection of custom functions used in current repository
#| echo: true
#| results: hide
#| message: false
#| code-fold: true

```

```{r}
#| label: declare-globals
#| code-summary: Values used throughout the report.
#| echo: true
#| results: hide
#| message: false
#| code-fold: true
```

```{r}
#| label: declare-functions
#| code-summary: Custom functions defined for use in this report.
#| echo: true
#| results: hide
#| message: false
#| code-fold: true
```

```{r}
#| label: define-query
#| code-summary: Define queries to run
#| echo: true
#| results: hide
#| message: false
#| code-fold: true
```

# Data

This report operates with the following data objects:  

`ds_event` - all episodes of service (FS, TR, AS) for individuals who had at least one engagement with ALSS services between `r target_window_opens` and `r target_window_closes`

`ds0_event` - subset of `ds_event`, limiting the scope to episodes Financial Support and removing any episodes not contained by the boundaries: `r target_window_opens` and `r target_window_closes`

`ds_taxonomy` - standard classification of service episodes for additional ad-hoc grouping, if needed.

```{r }
#| label: load-data
#| code-summary: Load data objects 
#| warning: false
#| code-fold: true
#| cache: true
# set your root to Project Directory when developing chunks live in .qmd

```

## Tweak 0

```{r}
#| label: tweak-data-0
#| code-summary: Organize data into `ds0` form. Cleaning up names, optimize some data types.
#| code-fold: true
#| cache: true
#| results: hide

```


## Inspect `ds0`

```{r}
#| label: inspect-data-0
#| code-summary: Inspect contents of the available data tables
#| code-fold: false
#| eval: true
#| cache: true
ds0_event %>% glimpse()
# ds0_taxonomy %>% glimpse()
```

## Tweak 1

```{r}
#| label: tweak-data-1
#| code-summary: Organize data into `ds0` form. Cleaning up names, optimize some data types.
#| code-fold: true
#| cache: true
#| results: hide
#| eval: false
```

# Fundamentals

```{r}
#| code-summary: Basic accounting 
#| code-fold: true
#| eval: true
#| cache: true
ds0_event %>% 
  group_by(program_class1,pc2, program_class3, client_type_code) %>% 
  summarize(
    episode_count = n()
    ,client_count = n_distinct(person_oid)
    ,.groups = "drop"
  ) %>% 
  relocate("program_class3",.after = "client_count") %>% 
  neat()
```

