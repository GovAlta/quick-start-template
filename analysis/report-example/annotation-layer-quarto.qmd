---
title: "Quarto Annotation Layer"
author: "Andriy Koval"
format:
  html:
    page-layout: full
    toc: true
    toc-location: right
    code-fold: show
    theme: simplex
    highlight-style: github
    colde-line-numbers: true
    css: styles.css
    self-contained: true
editor: visual
editor_options: 
  chunk_output_type: console
---

<!--  Set the working directory to the repository's base directory; this assumes the report is nested inside of two directories.-->

```{r}
#| code-summary: Reconciles working directory between execution modes
#| echo: false
#| results: hide
#| message: false 
cat("Working directory: ", getwd())
library(knitr)
opts_knit$set(root.dir='../../') # keep this chunk isolated  
```

```{r}
#| label: set_options
#| code-summary: report-wide formatting options
#| echo: false
#| results: hide
#| message: false 
cat("Working directory: ", getwd()) # turn on to test the location
report_render_start_time <- Sys.time()
# set options shared by all chunks
opts_chunk$set(
  results      = 'show',
  message      = FALSE,
  warning      = FALSE,
  comment      = NA,
  tidy         = FALSE,
  # dpi        = 400, # dots per inch,
  # out.width  = "650px", # pixels, this affects only the markdown, not the underlying png file.  The height will be scaled appropriately.
  fig.width    = 6, # inches
  fig.height   = 4, # inches
  fig.path     = 'figure-png-iso/' # where figures are stored
)
echo_chunks    <- FALSE #Toggle for debugging.
message_chunks <- FALSE #Toggle for debugging.
options(width=100) # number of characters to display in the output (dflt = 80)
ggplot2::theme_set(ggplot2::theme_bw()) # common theme for all graphs
read_chunk("./analysis/report-example/source-code-layer.R") #This allows knitr to call chunks tagged in the underlying *.R file.
```

# Environment

> Reviews the components of the working environment of the report. Non-technical readers are welcomed to skip. Come back if you need to understand the origins of custom functions, scripts, or data objects.

```{r}
#| label: load-packages
#| code-summary: Packages used in the current report
#| echo: true
#| results: hide
#| message: false
#| code-fold: true
```

```{r}
#| label: load-sources
#| code-summary: Collection of custom functions used in current repository 
#| echo: true
#| results: hide
#| message: false
#| code-fold: true
```

```{r}
#| label: declare-globals
#| code-summary: Values used throughout the report.
#| echo: true
#| results: hide
#| message: false 
#| code-fold: true
```

```{r}
#| label: declare-functions
#| code-summary: Custom functions defined for use in this report.
#| echo: true
#| results: hide
#| message: false 
#| code-fold: true
```

# Data

Consider a scenario in which rectangle `ds0` contains a set of survey responses

```{r }
#| label: load-data
#| code-summary: Load data rectangles to be used in the report
#| warning: false

```

What is inside our main *analysis rectangle*?

```{r}
#| label: inspect-data-0
#| code-summary: A few ways to summarize a data rectangle
```

# Facts about the rectangle

Let us ask a few fundamental questions about our rectangle and demonstrate how to verify the answers to them.

## Q.1 What is the grain of this data set?

> Grain - the most granular level of the data, answers the question "What is a row?"

```{r}
#| code-fold: false
ds0 %>% nrow()
ds0 %>% summarize(row_count=n())
ds0 %>% summarize(
  row_count = n()
  ,id_count = n_distinct(id)
) %>%
  mutate(
    id_is_the_grain = (row_count == id_count)
  )
```

## Q.2 What is the period of observation?

```{r}
#| code-fold: false
ds0$date %>% summary() # looks like from [2011 to 2014]

ds0 %>% 
  summarize(
    earliest_date  = min(date,na.rm=T)
    ,latest_date   = max(date,na.rm=T)
    ,span_in_days  = (latest_date-earliest_date)
  )

```

# Data Transformations

Wrangle data to assist in analysis

```{r}
#| label: tweak-data-1
#| code-summary: Organize data into the form `ds0`
```

```{r inspect-data-1}
ds0 %>% labelled::look_for() # compare the initial state to spot the diff
ds1 %>%  labelled::look_for()
# some summaries are more useful for various comparisons
explore::describe_all(ds0)
explore::describe_all(ds1)
# THe point is, must must provide a self-explanatory comparions of analysis rectangle BEFORE and AFTER a meaningful set of transformations. (e.g ds0 --> ds1)

ds1  %>%
  dplyr::distinct() %>%
  dplyr::arrange(desc(date)) # inspection of date variables
ds1 %>% tableone::CreateTableOne(data=.) %>% summary()
```

# Analysis

## Q.3 What is sex ratio?

```{r}
ds1 %>% group_by(sex) %>% count()
ds1 %>% group_by(sex) %>% summarize(row_count = n())
ds1 %>% group_by(sex) %>% summarize(respondent_count = n_distinct(id))

ds1 %>% 
  # mutate(weight = 1L) %>% 
  group_by(sex) %>% 
  summarize(
    respondent_count = n()
    ,client_count    = sum(weight)
  ) %>% 
  ungroup() %>% 
  mutate(
    respondent_share = respondent_count/sum(respondent_count)
    ,client_share    = client_count/sum(client_count)
)
# quick graph
ds1 %>% 
  group_by(sex) %>% 
  summarize(client_count = sum(weight)) %>%
  ggplot(aes(y = client_count, x = sex)) +
  geom_col()
```

Alternatively, organizing as sequence of objects (i.e. rectangle `ds1` begets plot `g1`) allows to be more versatile:

```{r}
g1 <-
  ds1 %>%
  group_by(sex) %>%
  summarize(client_count = sum(weight)) %>%
  ggplot(data=., aes(y = client_count, x = sex)) +
  geom_col()
g1 %>% print()
ggsave("../../analysis/report-example/g1.png",plot=g1)
ggsave("../../analysis/report-example/g1.png",plot=g1,width=6,height = 4) # optimize
ggsave("../../analysis/report-example/g1.jpg",plot=g1,width=21,height = 14,units = "cm") # optimize
```

## Q.4 Sex difference in the outcome

Is the outcome (employment) related to the sex of the client? Who is more likely to report being employed after the program?
